<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">

	<!--这个是自动生成的代码，可以有，也可以不要，一般删除。	 -->
	<!--   <display-name>servlet1</display-name>
	  <welcome-file-list>
	    <welcome-file>index.html</welcome-file>
	    <welcome-file>index.htm</welcome-file>
	    <welcome-file>index.jsp</welcome-file>
	    <welcome-file>default.html</welcome-file>
	    <welcome-file>default.htm</welcome-file>
	    <welcome-file>default.jsp</welcome-file>
	  </welcome-file-list> -->



	<!--Unit01内容 配置文件 -->
	<!--Unit01 第1个Servlet：HelloServlet配置： 1.配置Servlet类,给它取一个别名. -->
	<servlet>
		<servlet-name>hello</servlet-name>
		<!--相关类的路径 -->
		<servlet-class>com.learn.javaee.unit01.HelloServlet</servlet-class>

	</servlet>



	<!-- 2.通过别名引用一个类,给它设置一个网络访问路径(网名),它必须以/开头. -->
	<servlet-mapping>
		<!--网名需与上述servlet-name的名字相同 hello -->
		<servlet-name>hello</servlet-name>
		<!--浏览器路径 访问路径 -->
		<url-pattern>/hello</url-pattern>
	</servlet-mapping>



	<!--
		浏览器、服务器(tomcat),tomcat中有一个通信组件，负责处理浏览器请求

		代码完成后，部署tomcat，在浏览器中访问，格式：http://ip:port/项目名称/访问路径(url-pattern) ,
		1.浏览器向服务器发出请求：浏览器中输入路径，回车，浏览器就会想服务器发出请求，要求服务器返回数据。
		2.tomcat组件接收到请求，会根据路径在tomcat下找到项目，然后根据项目找到项目下的web.xml，并读取web.xml.
		3.通信组件会通过访问路径找到url-pattern中的路径'/hs'，然后找到'hello',
		根据'hello'找到'servlet中的servlet-name:hello',最后到'servlet-class'中的类HelloServlet，
		实例化并调用Service方法。
		4.通信组件返回给浏览器信息。

		常见错误：404错误：找不到资源 路径问题 	500错误:类名HelloServlet错误，HelloServlet中代码错误
				405错误：方法声明错误
	 -->


	<!-- Unit01 第2个Servlet的配置  -->
	<servlet>
		<servlet-name>time</servlet-name>
		<servlet-class>com.learn.javaee.unit01.TimeServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>time</servlet-name>
		<url-pattern>/time</url-pattern>
	</servlet-mapping>



	<!--Unit01 第3个Servlet的配置  -->
	<servlet>
		<servlet-name>date</servlet-name>
		<servlet-class>com.learn.javaee.unit01.DateServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>date</servlet-name>
		<url-pattern>/date</url-pattern>
	</servlet-mapping>



	<!--Unit01 第4个Servlet的配置  -->
	<servlet>
		<servlet-name>random</servlet-name>
		<servlet-class>com.learn.javaee.unit01.RandomServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>random</servlet-name>
		<url-pattern>/random</url-pattern>
	</servlet-mapping>


	<!--Unit01 第5个Servlet的配置  -->
	<servlet>
		<servlet-name>resinfo</servlet-name>
		<servlet-class>com.learn.javaee.unit01.ResInfoServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>resinfo</servlet-name>
		<url-pattern>/resinfo</url-pattern>
	</servlet-mapping>

	<!--Unit01 第6个Servlet的配置  整合Unit01中的所有Servlet 1-5 使用*.do来匹配路径-->
	<servlet>
		<servlet-name>Unit01Main</servlet-name>
		<servlet-class>com.learn.javaee.unit01.Unit01Servlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>Unit01Main</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>


	<!--Unit02内容 配置文件 -->

	<!--Unit02 第1个Servlet的配置 注册案例  -->
	<servlet>
		<servlet-name>reg</servlet-name>
		<servlet-class>com.learn.javaee.unit02.RegisterServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>reg</servlet-name>
		<url-pattern>/register</url-pattern>
		<!-- 这个路径必须与form表单中action属性保持一致，否则404错误 -->
	</servlet-mapping>



	<!--Unit02 第2个Servlet的配置 查询Oracle数据中的t_emp_lqs员工信息案例  -->
	<servlet>
		<servlet-name>listEmp</servlet-name>
		<servlet-class>com.learn.javaee.unit02.ListEmpServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>listEmp</servlet-name>
		<url-pattern>/listEmp</url-pattern>
	</servlet-mapping>



	<!--Unit02 第3个Servlet的配置  插入Oracle数据中的t_emp_lqs一条员工信息案例  -->
	<servlet>
		<servlet-name>addEmp</servlet-name>
		<servlet-class>com.learn.javaee.unit02.AddEmpServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>addEmp</servlet-name>
		<url-pattern>/addEmp</url-pattern>
	</servlet-mapping>



	<!--Unit02 第4个Servlet的配置  使用*.php重构今天所有的Servlet 1-3  -->
	<servlet>
		<servlet-name>Unit02Main</servlet-name>
		<servlet-class>com.learn.javaee.unit02.Unit02Servlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>Unit02Main</servlet-name>
		<url-pattern>*.php</url-pattern>
	</servlet-mapping>


	<!--Unit03内容 配置文件 -->

	<!--Unit03 第1个Servlet的配置  查询员工信息案例 1 -->
	<servlet>
		<servlet-name>findEmp</servlet-name>
		<servlet-class>com.learn.javaee.unit03.FindEmpServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>findEmp</servlet-name>
		<url-pattern>/findEmp</url-pattern>
	</servlet-mapping>



	<!--Unit03 第2个Servlet的配置  增加员工信息案例 2 -->
	<servlet>
		<servlet-name>add</servlet-name>
		<servlet-class>com.learn.javaee.unit03.AddEmp</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>add</servlet-name>
		<url-pattern>/add</url-pattern>
	</servlet-mapping>



	<!--Unit03 第3个Servlet的配置  访问路径的演示 案例3 -->
	<servlet>
		<servlet-name>path</servlet-name>
		<servlet-class>com.learn.javaee.unit03.PathServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>path</servlet-name>
		<!-- 1.精准匹配 -->
		<url-pattern>/path</url-pattern>
		<!-- 2.通配符 此方式获取不到Servlet路径  -->
		<!-- <url-pattern>/*</url-pattern> -->
		<!-- 3.使用后缀  详情见Unit03 第4个Servlet配置-->
	</servlet-mapping>



	<!--Unit03 第4个Servlet的配置  Servlet的声明周期 案例4 -->
	<servlet>
		<servlet-name>life</servlet-name>
		<servlet-class>com.learn.javaee.unit03.LifeTimeServlet</servlet-class>
		<!-- tomcat启动时加载此Servlet，中间的数字是加载的顺序(优先级) 1是最高优先级 -->
		<load-on-startup>2</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>life</servlet-name>
		<url-pattern>/life</url-pattern>
	</servlet-mapping>



	<!--Unit03 第5个Servlet的配置  模拟登录验证最大人数  案例5 -->
	<servlet>
		<servlet-name>login</servlet-name>
		<servlet-class>com.learn.javaee.unit03.LoginServlet</servlet-class>
		<!-- 给此Servlet预置参数 -->
		<init-param>
			<param-name>maxOnline</param-name>
			<param-value>3000</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>login</servlet-name>
		<url-pattern>/login</url-pattern>
	</servlet-mapping>


	<!-- 在标签外配置的参数是给所有Servlet公用的参数，它们都可以通过context读取改参数 -->
	<!-- 分页每页显示的条目数量 -->
	<context-param>
		<param-name>size</param-name>
		<param-value>20</param-value>
	</context-param>

	<!--Unit03 第6个Servlet的配置  模拟分页演示ServletContext  案例6 -->
	<servlet>
		<servlet-name>empno</servlet-name>
		<servlet-class>com.learn.javaee.unit03.FindEmpBySizeServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>empno</servlet-name>
		<url-pattern>/emp</url-pattern>
	</servlet-mapping>



	<!--Unit03 第7个Servlet的配置  模拟分页演示ServletContext  案例7 -->
	<servlet>
		<servlet-name>deptno</servlet-name>
		<servlet-class>com.learn.javaee.unit03.FindDeptServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>deptno</servlet-name>
		<url-pattern>/dept</url-pattern>
	</servlet-mapping>



	<!--Unit03 第8个Servlet的配置  此Servlet配合6,7 servlet 模拟流量统计 演示context可以读取变量 -->
	<!-- 辅助Servlet一般不写 <servlet-mapping> -->
	<servlet>
		<servlet-name>init</servlet-name>
		<servlet-class>com.learn.javaee.unit03.InitServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>



	<!--Unit03 第9个Servlet的配置  涨薪演示Servlet线程安全问题 案例8 -->
	<!-- 辅助Servlet一般不写 <servlet-mapping> -->
	<servlet>
		<servlet-name>up</servlet-name>
		<servlet-class>com.learn.javaee.unit03.UpServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>up</servlet-name>
		<url-pattern>/up</url-pattern>
	</servlet-mapping>



	<!--Unit03 第10个Servlet的配置  使用*.asp重构今天所有的Servlet 1-9  -->
	<servlet>
		<servlet-name>Unit03Main</servlet-name>
		<servlet-class>com.learn.javaee.unit03.Unit03Servlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>Unit03Main</servlet-name>
		<url-pattern>*.asp</url-pattern>
	</servlet-mapping>

	<!--Unit05 第1个Servlet的配置 使用MVC模式重构Unit03查询 和增加员工 -->
	<servlet>
		<servlet-name>fEmp</servlet-name>
		<servlet-class>com.learn.javaee.unit05.web.FindEmpServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>fEmp</servlet-name>
		<url-pattern>/fEmp</url-pattern>
	</servlet-mapping>



	<!--Unit05 第2个Servlet的配置 查询学生、课程演示EL、JSTL改善JSP页面  -->
	<servlet>
		<servlet-name>findStudent</servlet-name>
		<servlet-class>com.learn.javaee.unit05.web.FindStudentServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>findStudent</servlet-name>
		<url-pattern>/findStudent</url-pattern>
	</servlet-mapping>



	<!--Unit06 MainServlet的配置  模拟登录 演示cookie的使用  -->
	<servlet>
		<servlet-name>cookie</servlet-name>
		<servlet-class>com.learn.javaee.unit06.MainServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>cookie</servlet-name>
		<url-pattern>*.net</url-pattern>
	</servlet-mapping>



	<!--Unit07 MainServlet的配置  模拟登录 演示session的使用  -->
	<servlet>
		<servlet-name>session</servlet-name>
		<servlet-class>com.learn.javaee.unit07.MainServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>session</servlet-name>
		<url-pattern>*.jsd</url-pattern>
	</servlet-mapping>

	<!--Unit08 MainServlet的配置  模拟过滤器的拦截功能，监听器  -->
	<servlet>
		<servlet-name>fl</servlet-name>
		<servlet-class>com.learn.javaee.unit08.MainServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>fl</servlet-name>
		<url-pattern>*.cost</url-pattern>
	</servlet-mapping>

	<!-- 配置过滤器 -->
  	<!--注意，多个Filter之间的调用顺序，以filter-mapping的顺序为准。-->
	<filter>
		<filter-name>log</filter-name>
		<filter-class>com.learn.javaee.unit08.LogFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>log</filter-name>
		该Filter可以过滤那些请求路径
		<url-pattern>/*</url-pattern>
	</filter-mapping>

   <filter>
  		<filter-name>agility</filter-name>
  		<filter-class>com.learn.javaee.unit08.AgilityFilter</filter-class>
  	<init-param>
  		<param-name>city</param-name>
  		<param-value>北京</param-value>
  	</init-param>
   </filter>
   <filter-mapping>
  		<filter-name>agility</filter-name>
  		<url-pattern>/*</url-pattern>
   </filter-mapping>

	<!-- 配置监听器 -->
  	<!--配置监听器 实现相同的Listener接口的多个监听器，在执行是是按web.xml注册出现的  顺序来决定-->
	<listener>
		<listener-class>com.learn.javaee.unit08.CouListener</listener-class>
	</listener>

	<!-- 配置监听器 使用session监听器实现在线统计人数 -->
	<listener>
		<listener-class>com.learn.javaee.unit08.CountListener</listener-class>
	</listener>

	<!-- Unit11 配置文件的上传下载国际化 -->
   <servlet>
  		<servlet-name>file</servlet-name>
  		<servlet-class>com.learn.javaee.unit11.MainServlet</servlet-class>
   </servlet>
   <servlet-mapping>
  	 	<servlet-name>file</servlet-name>
  		<url-pattern>*.d</url-pattern>
   </servlet-mapping>

	<!-- Unit12 配置文件 使用ActiveMQ演示JMS -->
   <servlet>
  		<servlet-name>jms</servlet-name>
  		<servlet-class>com.learn.javaee.unit12.JMSServlet</servlet-class>
   </servlet>
   <servlet-mapping>
  	 	<servlet-name>jms</servlet-name>
  		<url-pattern>*.mq</url-pattern>
   </servlet-mapping>


	<!-- Unit13 配置文件 演示JCL、SLF4j、Log4j、Log4j2和Logback的演示 -->
   <servlet>
  		<servlet-name>log</servlet-name>
  		<servlet-class>com.learn.javaee.unit13.LogServlet</servlet-class>
   </servlet>
   <servlet-mapping>
  	 	<servlet-name>log</servlet-name>
  		<url-pattern>*.log</url-pattern>
   </servlet-mapping>


	<!-- 面试使用servlet配置 -->
   <servlet>
  		<servlet-name>interview</servlet-name>
  		<servlet-class>com.learn.javaee.InterviewServlet</servlet-class>
   </servlet>
   <servlet-mapping>
  	 	<servlet-name>interview</servlet-name>
  		<url-pattern>*.inter</url-pattern>
   </servlet-mapping>


</web-app>