package com.learn.fundamental;
//变量的演示
/**
 * 变量
 * 1.什么是变量：
 * 在软件系统中，是将数据存储在内存之中的，而对内存中的数据的引用就是变量，
 * 可以理解为变量就是内存中数据的代词。
 * 简单说， 变量就是指代在内存中开辟的存储空间，用于存放运算过程中需要用到的数据。
 *
 * 对于变量，我们需要关注如下几个方面：
 * 变量的声明：用特定语法声明一个变量，让运行环境为其分配空间。
 * 变量的命名：需要有个见名知意的名字，而且要符合Java语言规范。
 * 驼峰命名法testMethodScore
 * 变量的初始化：变量声明后，要为其赋一个确定的初值后再使用。
 * 变量的访问：可以对变量中的数据进行存取、操作，但必须和其类型匹配。
 *
 * 2.变量的声明：
 * 当需要使用一个变量时，必须对该变量进行声明。
 * 变量的声明包含两点：变量名和数据类型，int  a
 * 未经声明的变量不能使用： a = 1;  // 编译错误，变量没有声明
 * 一条语句中声明多个同类型变量
 * 如果多个变量的类型一样，可以在一条语句中声明，中间使用逗号分隔
 * int a=1,b=2;
 *
 * 3.变量的命名：
 * 命名需要符合标识符语法要求:
 * 在java语言中，对于变量、常量、方法、类、包等等都有名字，
 * 将这些名字统一称之为java标识符，标识符的命名规则如下列表所示：
 * 1.可以由字母、数字、"_"或"$"符组成，但是不能以数字开头。
 * 2.中文可以作为变量名，但不提倡使用。
 * 3.Java大小写敏感，即：严格区分大小写，在给命名变量时需要注意。
 * 4.不能使用Java保留字（一些Java语言规定好的，有特殊含义的字符），
 * 如：int、if、else、for、break等。
 * 命名需见名知意，且符合Java规范:变量的命名需采用"驼峰命名法"，
 * 即如果变量的名字有多个单词组成，除第一个单词外，其他单词的首字母大写，
 * 其余的字母小写，例如：salary、 javaScore 、studentName、empSalary 等。
 * 帕斯卡命名法: Score,MyScore,MyJavaScore
 *
 * 4.变量的初始化
 * 未经初始化的变量不能使用
 * Java语法规定：变量在使用之前必须初始化，即必须给该变量赋予特定的值，
 * 而在C语言中，变量使用之前可以不需要初始化，但是，其初始值不确定。
 * 而Java语言的设计者为了避免因此而带来的错误，规定变量必须初始化之后才能使用。
 * 在声明变量时初始化
 * 可以在变量声明时初始化，语法：变量类型 变量名称 = 初始值；
 * 在第一次使用变量前初始化
 * 可以在变量声明以后，通过赋值语句对变量进行初始化，
 * 但一定确保在第一次使用该变量之前
 * 初始化:第一次赋值 声明的同时初始化:int a=250;
 * 先声明后初始化：int a; a=250;
 *
 * 5.变量的访问
 * 可以对变量中的值进行存取，操作
 * 变量，顾名思义，可以改变的量，在java语言中，可以对其赋值、更改等操作。
 * 但是需要注意的是，对变量的操作即为对其所存储的数据的操作。
 * 变量的操作必须与类型匹配
 * 变量在声明时指定了它的数据类型，Java编译器会检测对该变量的操作是否与其类型匹配
 * ，如果对变量的赋值或者操作与其类型不匹配，会产生编译错误。
 *
 * 补充:
 * 1.变量作用域:简单通俗点讲,从变量的声明开始，到包含它最近的大括号结束
 * 2.变量重名问题: 作用域重叠时，变量不能同名
 *
 * @author Double
 *
 */
public class VariateDemos {

	//Java三种注释 单行注释// 多行注释/**/ 文档注释/***/

	/**
	 * 变量的定义：
	 * 在软件系统中，是将数据存储在内存之中的，而对内存中的数据的引用就是变量，可以理解为变量就是内存中数据的代词。
	 * 简单说， 变量就是指代在内存中开辟的存储空间，用于存放运算过程中需要用到的数据。
	 *
	 * 1.变量的声明：用特定语法声明一个变量，让运行环境为其分配空间。
	 *
	 * 2.变量的命名：需要有个见名知意的名字，而且要符合Java语言规范。驼峰命名法
	 *
	 * 3.变量的初始化：变量声明后，要为其赋一个确定的初值后再使用。
	 *
	 * 4.变量的访问：可以对变量中的数据进行存取、操作，但必须和其类型匹配。
	 *
	 *
	 */
	public static void main(String[] args) {
		/*
		 * 1.变量的声明
		 * 1.1当需要使用一个变量时，必须对该变量进行声明，变量的声明包含两点：变量名和数据类型
		 * 1.2未经声明的变量不能使用
		 * 1.3一条语句中声明多个同类型变量(但不提倡)
		 */
		int a;
		//上面的代码中，int为变量的数据类型，a为变量的名称.
		//当声明如上语句时，JVM会为该变量在内存中开辟存储空间，不同的变量类型决定了存储空间的结构（后面详细介绍）。

		//b = 1;  // 编译错误，变量没有声明
        int score = 0;
        //scord = 100； // 编译错误
        System.out.println(score);
        //Java语言语法规定，变量使用之前必须声明，否则会有编译错误

        //如果多个变量的类型一样，可以在一条语句中声明，中间使用逗号分隔
        int c=1, d=2;
        int e, f=3;
        //第一条语句，声明了两个整型变量，分别赋值为1和2，中间使用逗号分隔，最后以；号结尾。
        //第二条语句，声明了两个整型变量，c没有赋初始值，d赋初值为3。


        /*
         * 2.变量的命名：需要有个见名知意的名字，而且要符合Java语言规范。驼峰命名法
         *
         * 2.1命名需要符合标识符语法要求
         * 在java语言中，对于变量、常量、方法、类、包等等都有名字，将这些名字统一称之为java标识符，
         * 标识符的命名规则如下列表所示：
         * 1.可以由字母、数字、“_”或“$”符组成，但是不能以数字开头。
         * 2.中文可以作为变量名，但不提倡使用。
         * 3.Java大小写敏感，即：严格区分大小写，在给命名变量时需要注意。
         * 4.不能使用Java保留字（一些Java语言规定好的，有特殊含义的字符），如：int、if、else、for、break等。
         *
         * 2.2命名需见名知意，且符合Java规范
         * Java 变量的命名应“见名知意”，同时，Java编程规范要求：变量的命名需采用“驼峰命名法”，
         * 即如果变量的名字有多个单词组成，除第一个单词外，其他单词的首字母大写，其余的字母小写，
         * 例如：salary、 javaScore 、studentName、empSalary 等。
         */

        int a1,a_5$,_$y,_1,$5;
		//int a*b; //编译错误，不能包含*号
		//int 1a; //编译错误，不能以数字开头
		int aa = 5;
		//System.out.println(AA); //编译错误，严格区分大小写
		//int class; //编译错误，不能使用关键字
		int 年龄; //正确，但不建议
		int age; //建议"见名知意"
		int scores,mySocres,myJavaScores; //建议"驼峰命名法"


		/*
		 * 3.变量的初始化:第一次赋值
		 * 3.1未经初始化的变量不能使用
		 * Java语法规定：变量在使用之前必须初始化，即必须给该变量赋予特定的值，而在C语言中，
		 * 变量使用之前可以不需要初始化，但是，其初始值不确定，而Java语言的设计者为了避免因此而带来的错误，
		 * 规定变量必须初始化之后才能使用
		 *
		 * 3.2变量初始化的两种方式
		 * 3.2.1在声明变量时初始化
		 * 可以在变量声明时初始化，语法：变量类型 变量名称 = 初始值；
		 *
		 * 3.2.2 在第一次使用变量前初始化
		 * 可以在变量声明以后，通过赋值语句对变量进行初始化，但一定确保在第一次使用该变量之前
		 */

		int aaa = 250; //声明整型变量a并赋值为250
		int bbb;   //声明整型变量b
		bbb = 250; //给变量b赋值为250


		/*
		 * 4.变量的访问
		 * 4.1可以对变量中的值进行存取，操作
		 * 变量，顾名思义，可以改变的量，在java语言中，可以对其赋值、更改等操作，但是需要注意的是，
		 * 对变量的操作即为对其所存储的数据的操作
		 *
		 * 4.2变量的操作必须与类型匹配
		 * 变量在声明时指定了它的数据类型， Java编译器会检测对该变量的操作是否与其类型匹配，
		 * 如果对变量的赋值或者操作与其类型不匹配，会产生编译错误。
		 */

		// int a = 3.14; //编译错误，数据类型不匹配
		int bbbb = 5; // 声明整型变量bbbb并赋值为5
		int cccc = bbbb + 10; // 取出bbbb的值5，加10后，再赋值给变量cccc
		System.out.println(cccc); // 输出变量cccc的值15
		System.out.println("cccc"); // cccc，双引号中的原样输出
		bbbb = bbbb + 10; // 取出bbbb的值5，加10后，再赋值给bbbb
					// 在bbbb本身基础之上增10
		System.out.println(bbbb); // 15
		// System.out.println(m); //编译错误，m未声明
		int m;
		// System.out.println(m); //编译错误，m未初始化

 		/*
			 * 补充:
			 * 1.变量作用域:
			 *     从变量的声明开始，到包含它最近的大括号结束
			 * 2.变量重名问题:
			 *     作用域重叠时，变量不能同名
			 */
/*			int aaa=5;
			if(aaa>2){
				int b=6;
				//int aaa=55; //编译错误，作用域重叠时变量不能同名
			}else{
				int b=8;
			}*/

	}
}
